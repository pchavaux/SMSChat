@page "/phone"
@using SMSChat.Services
@using System.Diagnostics
@rendermode InteractiveServer
@inject SipService _sipservice
@inject IJSRuntime JS
@inject ILogger<PhonePage> _logger
   @using SIPSorcery.Net
   @using SIPSorcery.SIP

<style>    .keypad {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
    margin: 20px 0;
    }

    .keypad button {
    padding: 20px;
    font-size: 1.5em;
    border: none;

    color: white;
    border-radius: 5px;
    cursor: pointer;
    }

    .keypad button:hover {
    background-color: #0056b3;
    }

    .indicator {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 10px;
    }

    .keypad {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
    margin: 20px 0;
    }

    .keypad button {
    padding: 20px;
    font-size: 1.5em;
    border: none;
    color: white;
    border-radius: 5px;
    cursor: pointer;
    }

    .keypad button:hover {
    background-color: #0056b3;
    }
</style>
<div class="card-header d-flex align-items-center justify-content-between">
    <h4 class="mb-0">
        Cadmus <i class="bi bi-telephone"></i> Jail Talk IPS
    </h4>
    <div class="d-flex align-items-center">
        <div class="d-flex align-items-center me-3">
            <div class="indicator me-2" style="background-color:@(isOnline ? "green" : "red");"></div>
            <span>@(isOnline ? "Online" : "Offline")</span>
            @if(isOnline == false)
            {
                <button class="btn btn-primary me-2" @onclick="Register">Check</button> 
            }
        </div>
        <div class="d-flex align-items-center">

            <span class="balance">Acct Bal: $@(accountBalance.ToString("F2") ?? "0.00")</span>
        </div>
    </div>
</div>

<input @bind="RecipientNumber" placeholder="Number To Dial" />
<div>
    <button class="btn btn-primary" @onclick="Dial">Call</button>
    <button class="btn btn-primary" @onclick="Register">Register</button>
    <button class="btn btn-primary" @onclick="Hangup">Hangup</button>
    <button class="btn btn-primary" @onclick="Answer">Answer</button>
    <button class="btn btn-primary" @onclick="CheckVoicemail">Voicemail</button>
    <button class="btn btn-primary" @onclick="StartAudioCapture">Start Audio Capture</button>
    <button class="btn btn-primary" @onclick="StopAudioCapture">Stop Audio Capture</button>
</div>
<div class="keypad">
    @foreach (var key in DialPadKeys)
    {
        <button class="btn btn-primary" @onclick="() => DialDTMFTone(key)">@key</button>
    }
</div>
<div>
    <button class="btn btn-warning" @onclick="Backspace">Backspace</button>
    <button class="btn btn-danger" @onclick="Clear">Clear</button>
</div>

@code {


    private bool isOnline = false;
    public SIPTransport sipTransport { get; private set; }
    public string RecipientNumber { get; set; }
    public decimal accountBalance { get; set; } = 1.25m;
    public string DIDNumber { get; set; } = "3149366360";

    protected override async Task OnInitializedAsync()
    {
        Register();
     
    }
    private void OnIncomingCall()
    {
        // Update the status message
        statusMessage = "Incoming call ringing";
        RecipientNumber = "Incoming call...";
        // Trigger a UI refresh
        InvokeAsync(StateHasChanged);
    }
    public async Task Register2(){
        //   await _sipservice.Register("184942_vm", "#{J2{e[{+P!f", "chicago3.voip.ms");
    }
    public async Task Register()
    {
        try
        {
            await _sipservice.Register("1003", "12P15a57ul!", "162.221.94.162");
         //   await _sipservice.Register("184942_1003", "12P15a57ul!", "chicago3.voip.ms");
            isOnline = true; // Registration successful
            if(isOnline == true)
            {
              _logger.LogInformation("Registration Successful...");
            }
        }
        catch
        {
            isOnline = false; // Registration failed
        }
    }
    public async Task Dial()
    {
        Debug.WriteLine("Start dialing...");
        //await _sipservice.Dial();
        // await _sipClient.Call("6362935405");
        await _sipservice.NewCallMethod(RecipientNumber);
    }
    public async Task Hangup(){
        _sipservice.Hangup();
    }
    public async Task Answer(){

        _sipservice.Answer();
    }
    private string statusMessage = "Idle";
    private static readonly char[] DialPadKeys = "123456789*0#".ToCharArray();

    private async Task DialDTMFTone(char digit)
    {
        statusMessage = $"Sending DTMF Tone: {digit}";
        string destination = "sip:184942_vm@chicago3.voip.ms";

        // _sipservice.SendSipInfoRequest(destination, digit);
        RecipientNumber += digit;
        // await _sipservice.SendDTMFTone(digit);
    }

    private async Task EndCall()
    {
        //await _sipservice.StopAudioCaptureAsync(); // If needed to stop the audio.
        statusMessage = "Call ended.";
        _sipservice.Hangup();
    }
    private void Backspace()
    {
        if (!string.IsNullOrEmpty(RecipientNumber))
        {
            RecipientNumber = RecipientNumber.Substring(0, RecipientNumber.Length - 1);
        }
    }

    // Clears RecipientNumber
    private void Clear()
    {
        RecipientNumber = string.Empty;
    }
    public async Task CheckVoicemail()
    {
        
    }
    private async Task StartAudioCapture()
    {
        bool result = await JS.InvokeAsync<bool>("webrtcInterop.startAudioCapture");
        if (result)
        {
            Console.WriteLine("Audio capture started successfully.");
        }
        else
        {
            Console.WriteLine("Failed to start audio capture.");
        }
    }

    private async Task StopAudioCapture()
    {
        await JS.InvokeVoidAsync("webrtcInterop.stopAudioCapture");
        Console.WriteLine("Audio capture stopped.");
    }
}
