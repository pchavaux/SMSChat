@page "/channelslist"
@using SharedLibrary.Models
@inject SMSVideoChat9.Client.Services.ICustomerService customerService

<div class="list-group">
    @foreach (var channel in channels)
    {
        <div class="list-group-item @(selectedChannel?.Id == channel.Id ? "active" : "")"
             @onclick="() => SelectChannel(channel)"
             @ondblclick="() => EditChannel(channel)">
            <h5 class="mb-1">@channel.Name</h5>
            <p class="mb-1">@channel.Description</p>
        </div>
    }
</div>

@if (isEditing)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingChannel?.Id > 0 ? "Edit" : "Add") Channel</h5>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Name</label>
                        <input type="text" class="form-control" @bind="editingChannel.Name" />
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <input type="text" class="form-control" @bind="editingChannel.Description" />
                    </div>
                    <div class="form-group">
                        <label>SIP Number</label>
                        <input type="text" class="form-control" @bind="editingChannel.SipNumber" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveChannel">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Channel> channels = new();
    private Channel selectedChannel;
    private Channel editingChannel;
    private bool isEditing;

    [Parameter]
    public EventCallback<Channel> OnChannelSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadChannels();
    }

    private async Task LoadChannels()
    {
        channels = await customerService.GetChannelsAsync();
    }

    private async Task SelectChannel(Channel channel)
    {
        selectedChannel = channel;
        await OnChannelSelected.InvokeAsync(channel);
    }

    private void EditChannel(Channel channel)
    {
        editingChannel = new Channel
            {
                Id = channel.Id,
                Name = channel.Name,
                Description = channel.Description,
                SipNumber = channel.SipNumber
            };
        isEditing = true;
    }

    private async Task SaveChannel()
    {
        if (editingChannel.Id == 0)
        {
            await customerService.AddChannelAsync(editingChannel);
        }
        else
        {
            await customerService.UpdateChannelAsync(editingChannel);
        }

        isEditing = false;
        await LoadChannels();
    }

    private void CancelEdit()
    {
        isEditing = false;
        editingChannel = null;
    }
}